// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/forward/forwarder.go

// Package forward is a generated GoMock package.
package forward

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockForwarder is a mock of Forwarder interface.
type MockForwarder struct {
	ctrl     *gomock.Controller
	recorder *MockForwarderMockRecorder
}

// MockForwarderMockRecorder is the mock recorder for MockForwarder.
type MockForwarderMockRecorder struct {
	mock *MockForwarder
}

// NewMockForwarder creates a new mock instance.
func NewMockForwarder(ctrl *gomock.Controller) *MockForwarder {
	mock := &MockForwarder{ctrl: ctrl}
	mock.recorder = &MockForwarderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockForwarder) EXPECT() *MockForwarderMockRecorder {
	return m.recorder
}

// ForwardAll mocks base method.
func (m *MockForwarder) ForwardAll(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ForwardAll", ctx)
}

// ForwardAll indicates an expected call of ForwardAll.
func (mr *MockForwarderMockRecorder) ForwardAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForwardAll", reflect.TypeOf((*MockForwarder)(nil).ForwardAll), ctx)
}

// Stop mocks base method.
func (m *MockForwarder) Stop(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop", ctx)
}

// Stop indicates an expected call of Stop.
func (mr *MockForwarderMockRecorder) Stop(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockForwarder)(nil).Stop), ctx)
}

// MockForwarderType is a mock of ForwarderType interface.
type MockForwarderType struct {
	ctrl     *gomock.Controller
	recorder *MockForwarderTypeMockRecorder
}

// MockForwarderTypeMockRecorder is the mock recorder for MockForwarderType.
type MockForwarderTypeMockRecorder struct {
	mock *MockForwarderType
}

// NewMockForwarderType creates a new mock instance.
func NewMockForwarderType(ctrl *gomock.Controller) *MockForwarderType {
	mock := &MockForwarderType{ctrl: ctrl}
	mock.recorder = &MockForwarderTypeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockForwarderType) EXPECT() *MockForwarderTypeMockRecorder {
	return m.recorder
}

// Forward mocks base method.
func (m *MockForwarderType) Forward(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Forward", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Forward indicates an expected call of Forward.
func (mr *MockForwarderTypeMockRecorder) Forward(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Forward", reflect.TypeOf((*MockForwarderType)(nil).Forward), ctx)
}

// GetForwardType mocks base method.
func (m *MockForwarderType) GetForwardType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetForwardType")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetForwardType indicates an expected call of GetForwardType.
func (mr *MockForwarderTypeMockRecorder) GetForwardType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForwardType", reflect.TypeOf((*MockForwarderType)(nil).GetForwardType))
}

// GetReadyChannel mocks base method.
func (m *MockForwarderType) GetReadyChannel() chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReadyChannel")
	ret0, _ := ret[0].(chan struct{})
	return ret0
}

// GetReadyChannel indicates an expected call of GetReadyChannel.
func (mr *MockForwarderTypeMockRecorder) GetReadyChannel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReadyChannel", reflect.TypeOf((*MockForwarderType)(nil).GetReadyChannel))
}

// GetStopChannel mocks base method.
func (m *MockForwarderType) GetStopChannel() chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStopChannel")
	ret0, _ := ret[0].(chan struct{})
	return ret0
}

// GetStopChannel indicates an expected call of GetStopChannel.
func (mr *MockForwarderTypeMockRecorder) GetStopChannel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStopChannel", reflect.TypeOf((*MockForwarderType)(nil).GetStopChannel))
}

// Stop mocks base method.
func (m *MockForwarderType) Stop(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockForwarderTypeMockRecorder) Stop(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockForwarderType)(nil).Stop), ctx)
}
