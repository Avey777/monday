// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/run/runner.go
//
// Generated by this command:
//
//	mockgen -source=pkg/run/runner.go -destination=pkg/run/runner_mock.go -package=run
//

// Package run is a generated GoMock package.
package run

import (
	reflect "reflect"

	config "github.com/eko/monday/pkg/config"
	gomock "go.uber.org/mock/gomock"
)

// MockRunner is a mock of Runner interface.
type MockRunner struct {
	ctrl     *gomock.Controller
	recorder *MockRunnerMockRecorder
}

// MockRunnerMockRecorder is the mock recorder for MockRunner.
type MockRunnerMockRecorder struct {
	mock *MockRunner
}

// NewMockRunner creates a new mock instance.
func NewMockRunner(ctrl *gomock.Controller) *MockRunner {
	mock := &MockRunner{ctrl: ctrl}
	mock.recorder = &MockRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRunner) EXPECT() *MockRunnerMockRecorder {
	return m.recorder
}

// Restart mocks base method.
func (m *MockRunner) Restart(application *config.Application) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Restart", application)
}

// Restart indicates an expected call of Restart.
func (mr *MockRunnerMockRecorder) Restart(application any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restart", reflect.TypeOf((*MockRunner)(nil).Restart), application)
}

// Run mocks base method.
func (m *MockRunner) Run(application *config.Application) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run", application)
}

// Run indicates an expected call of Run.
func (mr *MockRunnerMockRecorder) Run(application any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockRunner)(nil).Run), application)
}

// RunAll mocks base method.
func (m *MockRunner) RunAll() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RunAll")
}

// RunAll indicates an expected call of RunAll.
func (mr *MockRunnerMockRecorder) RunAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunAll", reflect.TypeOf((*MockRunner)(nil).RunAll))
}

// Stop mocks base method.
func (m *MockRunner) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockRunnerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockRunner)(nil).Stop))
}
